# Generated by Django 4.2.13 on 2024-07-08 15:30

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CouponCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('percentage', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('valid_until', models.DateTimeField(help_text='When the coupon code expires.')),
                ('is_active', models.BooleanField(default=True)),
                ('max_uses', models.PositiveIntegerField(default=1, help_text='Max number of times the coupon code can be used.')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='The amount of times the coupon code has been used.')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('end_date', models.DateField(blank=True, help_text='Only if the event spans multiple days. Must be after the date field.', null=True)),
                ('published', models.BooleanField(default=False, help_text='Whether the event can be viewed by the public.')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], max_length=2, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('google_maps_link', models.URLField(blank=True, null=True)),
                ('google_maps_html', models.TextField(blank=True, help_text="Embed HTML for the Google Maps location. You can get this from the 'Embed a map' section of the Google Maps share options.", null=True)),
                ('media_file', models.FileField(blank=True, null=True, upload_to='event_media/')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='event_logos/')),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('waiver_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url_alias', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PhotoPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='Which event the photo package is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='photo_packages', to='RelayEntry.event')),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date', models.DateField(help_text='The day of the race.')),
                ('description', models.TextField(blank=True, null=True)),
                ('distance', models.CharField(choices=[('5K', '5K'), ('10K', '10K'), ('Half Marathon', 'Half Marathon'), ('Marathon', 'Marathon'), ('Ultra Marathon', 'Ultra Marathon'), ('Custom', 'Custom')], max_length=50)),
                ('custom_distance_value', models.DecimalField(blank=True, decimal_places=2, help_text='If each leg is the same distance, put that distance here. Otherwise put the total distance (if legs differ in distance.)', max_digits=7, null=True)),
                ('custom_distance_unit', models.CharField(blank=True, choices=[('mi', 'Miles'), ('km', 'Kilometers'), ('m', 'Meters')], max_length=2, null=True)),
                ('is_relay', models.BooleanField(default=False, help_text='Is the race a team relay race?')),
                ('num_runners', models.PositiveIntegerField(blank=True, help_text='The amount of runners per team in a relay race.', null=True)),
                ('team_type', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Mixed', 'Mixed'), ('Coed', 'Coed')], max_length=10, null=True)),
                ('same_distance', models.BooleanField(default=False, help_text='Whether each leg of the team relay race is the same distance.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='The price of registration before a discount may or may not have been applied.', max_digits=10)),
                ('course_map', models.FileField(blank=True, null=True, upload_to='race_course_maps/')),
                ('hour', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')], default=7)),
                ('minute', models.IntegerField(choices=[(0, '00'), (1, '01'), (2, '02'), (3, '03'), (4, '04'), (5, '05'), (6, '06'), (7, '07'), (8, '08'), (9, '09'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24'), (25, '25'), (26, '26'), (27, '27'), (28, '28'), (29, '29'), (30, '30'), (31, '31'), (32, '32'), (33, '33'), (34, '34'), (35, '35'), (36, '36'), (37, '37'), (38, '38'), (39, '39'), (40, '40'), (41, '41'), (42, '42'), (43, '43'), (44, '44'), (45, '45'), (46, '46'), (47, '47'), (48, '48'), (49, '49'), (50, '50'), (51, '51'), (52, '52'), (53, '53'), (54, '54'), (55, '55'), (56, '56'), (57, '57'), (58, '58'), (59, '59')], default=0)),
                ('time_indicator', models.CharField(choices=[('AM', 'AM'), ('PM', 'PM')], default='AM', max_length=2)),
                ('projected_team_time_choices', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, null=True, size=None)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(help_text='The event you created that this race belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='races', to='RelayEntry.event')),
            ],
            options={
                'ordering': ['name', 'event__name'],
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('confirmation_code', models.CharField(editable=False, max_length=16, unique=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='The price of registration before a discount may or may not have been applied.', max_digits=10)),
                ('email', models.EmailField(max_length=254)),
                ('dob', models.DateField()),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(help_text='First name of the participant', max_length=255)),
                ('last_name', models.CharField(help_text='Last name of the participant', max_length=255)),
                ('waiver_text', models.TextField()),
                ('signed_at', models.DateTimeField(auto_now_add=True)),
                ('parent_guardian_name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_guardian_signature', models.TextField(blank=True, null=True)),
                ('minor', models.BooleanField(default=False, help_text='Parent/Guardian for Minors (Under 18 years old)')),
                ('coupon_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='RelayEntry.couponcode')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='RelayEntry.event')),
                ('photo_package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='RelayEntry.photopackage')),
                ('race', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='RelayEntry.race')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('projected_team_time', models.CharField(blank=True, max_length=50, null=True)),
                ('captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='captained_teams', to='RelayEntry.registration')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='RelayEntry.race')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether user is approved to create content.')),
                ('stripe_account_id', models.CharField(blank=True, max_length=255, null=True)),
                ('stripe_account_verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('leg_order', models.PositiveIntegerField()),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='RelayEntry.team')),
            ],
        ),
        migrations.AddField(
            model_name='registration',
            name='team',
            field=models.ForeignKey(blank=True, help_text='The team the registration is associated with (if applicable).', null=True, on_delete=django.db.models.deletion.CASCADE, to='RelayEntry.team'),
        ),
        migrations.AddField(
            model_name='couponcode',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupon_codes', to='RelayEntry.event'),
        ),
        migrations.CreateModel(
            name='Leg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leg_number', models.PositiveIntegerField()),
                ('leg_map', models.FileField(blank=True, null=True, upload_to='leg_maps/')),
                ('custom_distance_value', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('custom_distance_unit', models.CharField(blank=True, choices=[('mi', 'Miles'), ('km', 'Kilometers'), ('m', 'Meters')], max_length=2, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legs', to='RelayEntry.race')),
            ],
            options={
                'unique_together': {('race', 'leg_number')},
            },
        ),
    ]
