"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

SECRET_KEY = os.getenv('SECRET_KEY')

# Determine the environment
ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'RelayEntry',
    'corsheaders',
]
CORS_ALLOW_CREDENTIALS = True
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
}
# CSRF settings
WWW_HOST = os.getenv('WWW_HOST', 'www.relayentry.com')
if ENVIRONMENT == 'development':
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:8080",
        "http://frontend:8080",
    ]
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    DEBUG = True
    CSRF_COOKIE_SAMESITE = 'Lax'
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', 'frontend']
    CORS_ALLOWED_ORIGINS = ["http://localhost:8080"]
else:
    DEBUG = False
    CSRF_TRUSTED_ORIGINS = ["https://relayentry.com", "https://www.relayentry.com"]
    # Ensure CSRF cookies are sent over HTTP
    # This should be set to True when deploying with HTTPS to ensure the cookie is only sent over secure connections.
    CSRF_COOKIE_SECURE = True
    # Ensure session cookies are sent over HTTP
    SESSION_COOKIE_SECURE = True
    # Secure headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # enabled SSL
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Allow JavaScript to access the CSRF cookie
    CSRF_COOKIE_SAMESITE = 'Strict'
    ALLOWED_HOSTS = ['relayentry.com', WWW_HOST]
    CORS_ALLOWED_ORIGINS = ["https://relayentry.com", "https://www.relayentry.com"]
    USE_X_FORWARDED_HOST = True

CSRF_COOKIE_HTTPONLY = False

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Define where collected static files will go in production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
if ENVIRONMENT == 'development':
    # SMTP configuration for development
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'mailhog')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 1025))
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = 'contact@relayentry.com'
    EMAIL_HOST_PASSWORD = 'your_password'
    DEFAULT_FROM_EMAIL = 'contact@relayentry.com'
else:
    # Email is turned off for production (for now)
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    EMAIL_HOST = ''
    EMAIL_PORT = 0
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    DEFAULT_FROM_EMAIL = 'contact@relayentry.com'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

LOGIN_URL = '/accounts/login/'
AUTHENTICATION_BACKENDS = ['backend.backends.ApprovedUserBackend']

# Access the Stripe API key from environment variables
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')

UI_BASE_URL = os.getenv('UI_BASE_URL')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'django_debug.log'),
            'formatter': 'verbose',
        },
        'production_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'production.log'),
            'formatter': 'verbose',
        },
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if ENVIRONMENT == 'development' else ['console', 'production_file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'RelayEntry': {
            'handlers': ['console', 'file'] if ENVIRONMENT == 'development' else ['console', 'production_file'],
            'level': 'DEBUG' if ENVIRONMENT == 'development' else 'WARNING',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'rest_framework': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'PIL': {  # Adding PIL logger for Pillow image library
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'] if ENVIRONMENT == 'development' else ['console', 'production_file'],
            'level': 'DEBUG' if ENVIRONMENT == 'development' else 'WARNING',
            'propagate': False,
        },
    },
     'root': {
        'handlers': ['console', 'file'] if ENVIRONMENT == 'development' else ['console', 'production_file'],
        'level': 'WARNING',
    },
}

# Log to console in development and to a file in production
if ENVIRONMENT == 'production':
    LOGGING['handlers']['console']['level'] = 'ERROR'
    LOGGING['handlers']['file']['level'] = 'ERROR'